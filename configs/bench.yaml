# Engineering-Grade WebAssembly Benchmark Configuration
# Simplified for engineering reliability, not academic rigor
# Focus: Practical Rust vs TinyGo performance comparison for engineering decisions

experiment:
  name: "Rust vs TinyGo WebAssembly Performance Comparison"
  version: "2.1"
  description: "Engineering-focused performance comparison for language selection decisions"

# Simplified measurement parameters for engineering reliability
environment:
  warmup_runs: 20
  measure_runs: 100
  repetitions: 3

  # Base timeout strategy for WASM benchmarks
  timeout: 600                # Base timeout in seconds (10 minutes)
                              # Increased from 240s due to intensive WASM tasks taking >3 minutes
                              # Based on observed max execution: ~180s for intensive tasks
                              # Recommended for measure_runs: 100, repetitions: 3
                              #
                              # Timeout multipliers used in code:
                              # - browser_protocol: 2x (1200s) - Puppeteer automation timeout
                              # - navigation: 1x (600s) - Page loading and navigation
                              # - task_execution: 2.5x (1500s) - Individual benchmark execution
                              # - element_wait: 0.25x (150s) - DOM element waiting
                              # - wasm_intensive: 3x (1800s) - CPU-intensive WASM tasks
                              # - quick_mode_factor: 0.1x - Reduced timeouts for development

# Simplified task definitions - keep core scales only
tasks:
  mandelbrot:
    description: "CPU-intensive computation test"
    scales:
      small:
        width: 256
        height: 256
        max_iter: 500
      medium:
        width: 512
        height: 512
        max_iter: 1000
      large:
        width: 1024
        height: 1024
        max_iter: 2000

  json_parse:
    description: "Object allocation and parsing test"
    scales:
      small:
        record_count: 5000
      medium:
        record_count: 20000
      large:
        record_count: 50000
    schema:
      fields: ["id", "value", "flag", "name"]
      id_sequential: true
      value_random: true
      flag_derived: true
      name_pattern: "user_{id}"

  matrix_mul:
    description: "Dense matrix multiplication test"
    scales:
      small:
        dimension: 256
      medium:
        dimension: 384
      large:
        dimension: 512

# Simplified language configurations
languages:
  rust:
    enabled: true
    target: "wasm32-unknown-unknown"
    optimization_levels:
      - name: "optimized"
        cargo_flags: "--release"
        cargo_config:
          opt_level: 3
          lto: "fat"
          codegen_units: 1
          panic: "abort"
          strip: "debuginfo"
    post_processing:
      - "wasm-strip"
      - "wasm-opt -O3"

  tinygo:
    enabled: true
    target: "wasm"
    optimization_levels:
      - name: "optimized"
        build_flags:
          - "-opt=2"
          - "-panic=trap"
          - "-no-debug"
          - "-scheduler=none"
          - "-gc=conservative"
    post_processing:
      - "wasm-strip"
      - "wasm-opt -Oz"

# Basic verification
verification:
  hash_algorithm: "fnv1a"
  hash_offset_basis: 2166136261
  hash_prime: 16777619
  floating_point_precision: 6

# Engineering-focused quality control
qc:
  max_coefficient_variation: 0.15
  outlier_iqr_multiplier: 1.5
  min_valid_samples: 80
  # timeout handling
  treat_timeout_as: "failure" 
  failure_rate: 0.1          # 10% failure rate maximum

  # Overall quality evaluation thresholds (layered threshold strategy)
  quality_invalid_threshold: 0.1    # 10% invalid groups triggers INVALID overall
  quality_high_risk_threshold: 0.3  # 30% problem groups triggers INVALID overall
  quality_warning_threshold: 0.3    # 30% warning groups triggers WARNING overall

# Engineering-focused statistical analysis
statistics:
  confidence_level: 0.95           # Standard 95% confidence
  significance_alpha: 0.05         # Standard Î± = 0.05
  effect_size_metric: "cohens_d"   # Cohen's d for effect size

  effect_size_thresholds:
    small: 0.3
    medium: 0.6
    large: 1.0
  minimum_detectable_effect: 0.3

# Visualization and plotting configuration
plots:
  # Output settings
  dpi_basic: 150                   # DPI for basic comparison charts
  dpi_detailed: 300                # DPI for detailed analysis charts
  output_format: "png"             # Output file format

  figure_sizes:
    basic: [10, 6]                  # Figure size for basic charts [width, height]
    detailed: [16, 12]              # Figure size for detailed charts [width, height]

  font_sizes: 
    default: 11                       # Default font size
    labels: 12                        # Axis and label font size
    titles: 14                        # Title font size

  # Color scheme for languages
  color_scheme:
    rust: "#CE422B"                # Rust orange-red
    tinygo: "#00ADD8"              # Go cyan-blue


